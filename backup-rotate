#!/bin/bash
#
# This script rotates the backup directories.
#
# Original authors: https://www.heinlein-support.de
# Original source: https://www.heinlein-support.de/projekte/rsync-backup/backup-rotate
#
# Translated and enhanced by Mattanja Kern <https://github.com/mattanja/rsync-backup-and-rotate>
# Enhanced by Roan Mooij <https://github.com/syntext/rsync-backup-and-rotate>
#
# Usage: backup-rotate [-d /backup/path] <fqdn-servername>
#

# ### Configuration
# Check available space?
CHECK_HDMINFREE=true
HDMINFREE=500

# Mount backup partition as readonly after writing the backup?
MOUNT_RO=false
MOUNT_DEVICE=/dev/md3

# Backup destination path (server name and rotation dirs will be appended)
DEST_PATH=/opt/backups

# Read parameter options
OPTIND=1
while getopts ":d:" opt; do
	case $opt in
		d)
			DEST_PATH="$OPTARG"
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			logger "Invalid option: -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			logger "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

# ### first parameter after options must be FQDN of the server
if [ -n "$1" ] ; then
	SERVER="$1"
else
	echo "Error: Usage $0 <fqdn-hostname>"
	exit
fi

# Log config info
echo "Backup path: $DEST_PATH"
logger "Backup path: $DEST_PATH"

# ### Let`s Rock`n`Roll....

# Check available space and inodes
GETPERCENTAGE='s/.* \([0-9]\{1,3\}\)%.*/\1/'
if $CHECK_HDMINFREE ; then
	KBISFREE=`df /$DEST_PATH | tail -n1 | sed -e "$GETPERCENTAGE"`
	INODEISFREE=`df -i /$DEST_PATH | tail -n1 | sed -e "$GETPERCENTAGE"`
	if [ $KBISFREE -ge $HDMINFREE -o $INODEISFREE -ge $HDMINFREE ] ; then
		echo "Fatal: Not enough space left for rotating backups!"
		logger "Fatal: Not enough space left for rotating backups!"
		exit
	fi
fi

# Mount as read/write if configured
if $MOUNT_RO ; then
	if `mount -o remount,rw $MOUNT_DEVICE $DEST_PATH` ; then
		echo "Error: Could not remount $MOUNT_DEV readwrite"
		logger "Error: Could not remount $MOUNT_DEV readwrite"
		exit
	fi
fi

# Create backup dir
if ! [ -d $DEST_PATH/$SERVER/daily.0 ] ; then
	mkdir -p $DEST_PATH/$SERVER/daily.0
fi

STARTDATE=$(date +'%Y-%m-%d %T')
echo "$STARTDATE Rotating snapshots of $SERVER..."
logger "$STARTDATE Rotating snapshots of $SERVER..."

# Delete oldest daily backup
if [ -d $DEST_PATH/$SERVER/daily.7 ] ; then
	rm -rf $DEST_PATH/$SERVER/daily.7
fi

# Shift all other daily backups ahead one day
for OLD in 6 5 4 3 2 1	; do
	if [ -d $DEST_PATH/$SERVER/daily.$OLD ] ; then
		NEW=$[ $OLD + 1 ]
		# Backup last date
		touch $DEST_PATH/.timestamp -r $DEST_PATH/$SERVER/daily.$OLD
		mv $DEST_PATH/$SERVER/daily.$OLD $DEST_PATH/$SERVER/daily.$NEW
		# Restore timestamp
		touch $DEST_PATH/$SERVER/daily.$NEW -r $DEST_PATH/.timestamp
	fi
done

# Copy hardlinked snapshot of level 0 to level 1 (before updating 0 via rsync)
if [ -d $DEST_PATH/$SERVER/daily.0 ] ; then
	cp -al $DEST_PATH/$SERVER/daily.0 $DEST_PATH/$SERVER/daily.1
fi

ENDDATE=$(date +'%Y-%m-%d %T')
echo "$ENDDATE Finished rotating snapshots of $SERVER..."
logger "$ENDDATE Finished rotating snapshots of $SERVER..."

# Mount as read-only if configured
if $MOUNT_RO ; then
	if `mount -o remount,ro $MOUNT_DEVICE $DEST_PATH` ; then
		echo "Error: Could not remount $MOUNT_DEV readonly"
		logger "Error: Could not remount $MOUNT_DEV readonly"
		exit
	fi
fi
